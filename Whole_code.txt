import tensorflow as tf
from tensorflow import keras
import numpy as np
import matplotlib.pyplot as plt

path = ("C:/Users/adeat/Desktop/Project/Class/Tensorflow/utf-8''mnist.npz")

class myCallback(tf.keras.callbacks.Callback):
    def on_epoch_end(self, epoch, logs = {}):
        if(logs.get('loss') < 0.03):
            print("\n Reached 99% accuracy")
            self.model.stop_training = True

callbacks = myCallback()

mnist = tf.keras.datasets.mnist

(training_images, training_labels), (testing_images, testing_label) = mnist.load_data(path)

np.set_printoptions(linewidth=200)
plt.imshow(training_images[10])
print(training_images[10])
print(training_labels[10])

training_images = training_images / 255.0
testing_images = testing_images / 255.0

model = tf.keras.Sequential([
            tf.keras.layers.Flatten(),
            tf.keras.layers.Dense(128, activation = tf.nn.relu),
            tf.keras.layers.Dense(10, activation = tf.nn.softmax)
])

model.compile(optimizer = 'adam', loss= 'sparse_categorical_crossentropy', metrics = ['accuracy'])

model.fit(training_images, training_labels, epochs = 10, callbacks=[callbacks])

model.evaluate(testing_images, testing_label)

classification = model.predict(testing_images)
print(classification[0])
print(testing_label[0])

plt.imshow(testing_images[0])